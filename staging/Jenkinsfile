pipeline {
    agent any 
    options {
        skipDefaultCheckout(true)
    }
    stages {
        stage('Build') { 
            steps {
                echo 'Cloning files from repo'
                git branch: 'staging', credentialsId: "${APP_REPO_CREDENTIALS}", url: "${APP_REPO_URL}"

                dir('cicd') {
                    echo 'Cloning files from cicd'
                    git branch: 'test', credentialsId: "${CICD_REPO_CREDENTIAL}", url: "${CICD_REPO_URL}"

                    echo 'Move files to ws'
                    dir('staging'){
                        fileOperations([fileCopyOperation(
                            excludes: 'Jenkinsfile',
                            flattenFiles: true,
                            includes: "*",
                            targetLocation: "${WORKSPACE}/"
                        )])
                    }
                }
                
                echo 'Build docker image'
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIAL}", usernameVariable: 'USR', passwordVariable: 'PASSWD')]){
                        dockerImage = docker.build "${USR}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"
                    }
                }
            }

        }

        stage('Backup') {
            steps{
                echo 'Pull docker image to DockerHub'
                script {
                    docker.withRegistry('', "${DOCKER_HUB_CREDENTIAL}" ) { 
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
        
        stage('Deploy') {
            agent { label "${ANSIBLE_AGENT_NODE}" }
            steps {
                echo 'Deploy docker image to server'
                dir('cicd') {
                    git branch: 'test', credentialsId: "${CICD_REPO_CREDENTIAL}", url: "${CICD_REPO_URL}"
                }
                dir('cicd/ansible'){
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIAL}", usernameVariable: 'USR', passwordVariable: 'PASSWD')]){
                        ansiblePlaybook(
                            inventory: 'hosts.ini',
                            playbook: 'playbook.yml',
                            credentialsId: "${TARGET_SERVER_CREDENCIAL}",
                            limit: 'app-test',
                            extraVars: [
                                app_name: "${APP_NAME_ON_SERVER}",
                                docker_image_name: "${USR}/${DOCKER_IMAGE_NAME}",
                                app_port: "${APP_PORT_ON_SERVER}"
                            ]
                        )
                    }
                }
            }
        }
    }
}