String gitCredentials = "MyGitHub"
String dockerHubCredentials = "MyDockerHub"
String vmCredentials = "VagrantVM-192.168.60.6"
String repoUrl = "https://github.com/warhunt/hello-app.git"
String ciRepoUrl = "https://github.com/warhunt/hello-app-cicd.git"
String branchName = "staging"
pipeline {
    agent any 
    options {
        skipDefaultCheckout(true)
    }
    stages {
        stage('Build') { 
            agent { label 'ansibleNode' }
            steps {
                dir('cicd') {
                    git branch: 'test', credentialsId: gitCredentials, url: ciRepoUrl

                    dir('staging/ansible'){
                        ansiblePlaybook(
                            inventory: 'hosts.ini',
                            playbook: 'playbook.yml',
                            credentialsId: 'appTestSSH',
                            limit: 'app-test',
                            extraVars: [
                                app_name: "app-test",
                                docker_image_name: "wolly8898/hello-app-staging",
                                app_port: "3000"
                            ]
                        )
                    }
                }
                
                /*
                echo 'Cloning files from (branch: "' + branchName + '" )'
                git branch: branchName, credentialsId: gitCredentials, url: repoUrl

                dir('ci') {
                    echo 'Cloning files from ci'
                    git branch: 'master', credentialsId: gitCredentials, url: ciRepoUrl

                    fileOperations([fileCopyOperation(
                        excludes: 'staging/Jenkinsfile',
                        flattenFiles: true,
                        includes: "staging/*",
                        targetLocation: "${WORKSPACE}/"
                    )])
                }
                
                script {
                    dockerImage = docker.build "wolly8898/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"

                    docker.withRegistry('', dockerHubCredentials ) { 
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
                */
            }

        }
        /*
        stage('Deploy'){
            steps {

            }
        }
        stage('Remove Unused docker image') {
            steps{
            sh "docker rmi $DOCKER_IMAGE_NAME:$BUILD_NUMBER"
            sh "docker rmi $DOCKER_IMAGE_NAME:latest"
            }
        }
        */
    }
}